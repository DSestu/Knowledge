name: deploy-book

on:
  # Trigger the workflow on push to main branch
  push:
    branches:
      - main

env:
  BASE_URL: /${{ github.event.repository.name }}

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy-book:
    runs-on: ubuntu-latest
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v3

      # Install dependencies
      - name: Set up uv
        run: curl -LsSf https://astral.sh/uv/0.4.4/install.sh | sh

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv_cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: "Set up Python"
        run: uv python install # Will look at the pyproject.toml file

      - name: Install dependencies
        run: uv sync --all-extras

      # Build the book
      - name: Build the book
        run: |
          uv run jupyter-book build knowledge

      # Upload the book's HTML as an artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "knowledge/_build/html"

      # Deploy the book's HTML to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Minimize uv cache
        run: uv cache prune --ci